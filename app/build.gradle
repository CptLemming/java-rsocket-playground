/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.google.protobuf" version "0.9.4"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
 
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-rsocket
    implementation 'org.springframework.boot:spring-boot-starter-rsocket:3.3.4'

    implementation 'com.google.protobuf:protobuf-java:3.6.1'
    implementation 'io.rsocket.rpc:rsocket-ipc-core:0.3.0'
    implementation 'io.rsocket.rpc:rsocket-rpc-core:0.3.0'

    // implementation 'io.grpc:grpc-stub:1.15.1'
    // implementation 'io.grpc:grpc-protobuf:1.15.1'

    // if (JavaVersion.current().isJava9Compatible()) {
    //     // Workaround for @javax.annotation.Generated
    //     // see: https://github.com/grpc/grpc-java/issues/3633
    //     implementation 'javax.annotation:javax.annotation-api:1.3.1'
    // }

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = 'com.google.protobuf:protoc:3.6.1'
  }
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    // grpc {
    //   artifact = 'io.grpc:protoc-gen-grpc-java:1.15.1'
    // }
    rsocketRpc {
      artifact = "io.rsocket.rpc:rsocket-rpc-protobuf:0.3.0"
    }
  }
  generateProtoTasks {
    ofSourceSet('main').configureEach {
      plugins {
        // Apply the "grpc" plugin whose spec is defined above, without
        // options.  Note the braces cannot be omitted, otherwise the
        // plugin will not be added. This is because of the implicit way
        // NamedDomainObjectContainer binds the methods.
        // grpc { }
        rsocketRpc {}
      }
    }
  }
}
